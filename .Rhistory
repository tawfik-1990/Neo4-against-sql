Transactions_outdegree_SQL_most10 <- dbFetch(SQL)
toc()
tic()
con <- dbConnect(drv = RMariaDB::MariaDB(), username = "root",password = "13021990Az&", host="104.155.13.142", port = 3306)
#query = "LOAD DATA LOCAL INFILE 'dataframecsv14.csv' INTO TABLE waves.type4_assestid_null
#                                           FIELDS TERMINATED by ','
#                                                     "
#dbGetQuery(con, query)
#dbGetQuery(con,"DROP TABLE waves.type4_assestid_null")
SQL<-dbSendQuery(con, paste(" select sum(amount) AS sumamount, sender  Sender FROM waves.type4_assestid_null",
"  GROUP BY  sender  order by  sumamount desc  limit 10  "))
Transactions_outdegree_SQL_most10 <- dbFetch(SQL)
toc()
tic()
use_python("C:\Users\PC\AppData\Local\Programs\Python\Python37")
is_python_available <- py_available()
#paste("Is Python Available?", is_python_available)
uri = "bolt://localhost:7687"
neo4j <-import("neo4j", convert = FALSE)
token <- neo4j$basic_auth("neo4j","blockchain")
driver <- neo4j$GraphDatabase$driver(uri, auth=token)
the_session <- driver$session()
tx <- the_session$begin_transaction()
record <- tx$run("MATCH (user:Sender )-[w:senden]->(recipient) with SUM(toInteger(w.weight)) as sum, user as user  return user.num, sum  order by  sum desc  limit 10")
record_data <- record$data()
toc()
dat<-py_to_r(record_data)
#convertir list to dataframe
ed <- data.frame(matrix(unlist(dat), ncol = max(lengths(dat)), byrow = TRUE))
library(RMariaDB)
library(tictoc)
library(reticulate)
library(dplyr)
tic()
con <- dbConnect(drv = RMariaDB::MariaDB(), username = "root",password = "13021990Az&", host="104.155.13.142", port = 3306)
#query = "LOAD DATA LOCAL INFILE 'dataframecsv14.csv' INTO TABLE waves.type4_assestid_null
#                                           FIELDS TERMINATED by ','
#                                                     "
#dbGetQuery(con, query)
#dbGetQuery(con,"DROP TABLE waves.type4_assestid_null")
SQL<-dbSendQuery(con, paste(" select distinct recipient as recipi from waves.type4_assestid_null where sender in  (select distinct recipient from  waves.type4_assestid_null where sender in (select recipient from   (select distinct recipient  from waves.type4_assestid_null limit 10000) as v2 ))"))
Transactions_outdegree_SQL <- dbFetch(SQL)
toc()
tic()
use_python("C:\Users\PC\AppData\Local\Programs\Python\Python37")
is_python_available <- py_available()
#paste("Is Python Available?", is_python_available)
uri = "bolt://localhost:7687"
neo4j <-import("neo4j", convert = FALSE)
token <- neo4j$basic_auth("neo4j","blockla5er")
driver <- neo4j$GraphDatabase$driver(uri, auth=token)
the_session <- driver$session()
tx <- the_session$begin_transaction()
record <- tx$run("MATCH (user:Sender)-[:senden*1..3]->(recipient:Sender) WHERE recipient <> user RETURN recipient, user limit 10000")
record_data <- record$data()
toc()
dat<-py_to_r(record_data)
#convertir list to dataframe
ed <- data.frame(matrix(unlist(dat), ncol = max(lengths(dat)), byrow = TRUE))
View(ed)
tic()
use_python("C:\Users\PC\AppData\Local\Programs\Python\Python37")
is_python_available <- py_available()
#paste("Is Python Available?", is_python_available)
uri = "bolt://localhost:7687"
neo4j <-import("neo4j", convert = FALSE)
token <- neo4j$basic_auth("neo4j","blockla5er")
driver <- neo4j$GraphDatabase$driver(uri, auth=token)
the_session <- driver$session()
tx <- the_session$begin_transaction()
record <- tx$run("MATCH (user:Sender)-[:senden*1..3]->(recipient:Sender) with user as use, recipient as re limit 10000 WHERE recipient <> use RETURN re.name, use.name")
record_data <- record$data()
toc()
dat<-py_to_r(record_data)
#convertir list to dataframe
ed <- data.frame(matrix(unlist(dat), ncol = max(lengths(dat)), byrow = TRUE))
View(ed)
View(Transactions_outdegree_SQL)
tic()
use_python("C:\Users\PC\AppData\Local\Programs\Python\Python37")
is_python_available <- py_available()
#paste("Is Python Available?", is_python_available)
uri = "bolt://localhost:7687"
neo4j <-import("neo4j", convert = FALSE)
token <- neo4j$basic_auth("neo4j","blockla5er")
driver <- neo4j$GraphDatabase$driver(uri, auth=token)
the_session <- driver$session()
tx <- the_session$begin_transaction()
record <- tx$run("MATCH (n)
WITH distinct n
limit 10
match (n)-[:senden*1..3]->(recipient)
WHERE recipient <> n
RETURN recipient.name, n.name")
record_data <- record$data()
toc()
dat<-py_to_r(record_data)
#convertir list to dataframe
ed <- data.frame(matrix(unlist(dat), ncol = max(lengths(dat)), byrow = TRUE))
tic()
con <- dbConnect(drv = RMariaDB::MariaDB(), username = "root",password = "13021990Az&", host="104.155.13.142", port = 3306)
#query = "LOAD DATA LOCAL INFILE 'dataframecsv14.csv' INTO TABLE waves.type4_assestid_null
#                                           FIELDS TERMINATED by ','
#                                                     "
#dbGetQuery(con, query)
#dbGetQuery(con,"DROP TABLE waves.type4_assestid_null")
SQL<-dbSendQuery(con, paste("   select COUNT(*) AS sumamount, sender  Sender FROM waves.type4_assestid_null  GROUP BY  sender  order by  sumamount desc limit 10 "))
Transactions_outdegree_SQL <- dbFetch(SQL)
toc()
tic()
use_python("C:\Users\PC\AppData\Local\Programs\Python\Python37")
is_python_available <- py_available()
#paste("Is Python Available?", is_python_available)
uri = "bolt://localhost:7687"
neo4j <-import("neo4j", convert = FALSE)
token <- neo4j$basic_auth("neo4j","blockla5er")
driver <- neo4j$GraphDatabase$driver(uri, auth=token)
the_session <- driver$session()
tx <- the_session$begin_transaction()
record <- tx$run("MATCH (user:Sender )-[w:senden]->(recipient:Sender) with count(w)as count, user as user  return user.name, count  order by  count desc  limit 10")
record_data <- record$data()
toc()
dat<-py_to_r(record_data)
#convertir list to dataframe
ed <- data.frame(matrix(unlist(dat), ncol = max(lengths(dat)), byrow = TRUE))
tic()
con <- dbConnect(drv = RMariaDB::MariaDB(), username = "root",password = "13021990Az&", host="104.155.13.142", port = 3306)
#query = "LOAD DATA LOCAL INFILE 'dataframecsv14.csv' INTO TABLE waves.type4_assestid_null
#                                           FIELDS TERMINATED by ','
#                                                     "
#dbGetQuery(con, query)
#dbGetQuery(con,"DROP TABLE waves.type4_assestid_null")
SQL<-dbSendQuery(con, paste("select recipient, count(recipient) as sum ,  sender  from  waves.type4_assestid_null where sender in   (select sender from   (select count(amount) AS sumamount,sender  from  waves.type4_assestid_null GROUP BY  sender order by  sumamount desc limit 10) as v2 ) GROUP BY  recipient, sender order by  sum desc limit 10"))
Transactions_outdegree_SQL <- dbFetch(SQL)
toc()
View(dat)
dat
View(Transactions_outdegree_SQL)
tic()
con <- dbConnect(drv = RMariaDB::MariaDB(), username = "root",password = "13021990Az&", host="104.155.13.142", port = 3306)
#query = "LOAD DATA LOCAL INFILE 'dataframecsv14.csv' INTO TABLE waves.type4_assestid_null
#                                           FIELDS TERMINATED by ','
#                                                     "
#dbGetQuery(con, query)
#dbGetQuery(con,"DROP TABLE waves.type4_assestid_null")
SQL<-dbSendQuery(con, paste("select recipient, sum(amount) as sum ,  sender  from  waves.type4_assestid_null where sender in   (select sender from   (select sum(amount) AS sumamount,sender  from  waves.type4_assestid_null GROUP BY  sender order by  sumamount desc limit 10) as v2 ) GROUP BY  recipient, sender order by  sum desc limit 10"))
Transactions_outdegree_SQL <- dbFetch(SQL)
toc()
View(Transactions_outdegree_SQL)
tic()
con <- dbConnect(drv = RMariaDB::MariaDB(), username = "root",password = "13021990Az&", host="104.155.13.142", port = 3306)
#query = "LOAD DATA LOCAL INFILE 'dataframecsv14.csv' INTO TABLE waves.type4_assestid_null
#                                           FIELDS TERMINATED by ','
#                                                     "
#dbGetQuery(con, query)
#dbGetQuery(con,"DROP TABLE waves.type4_assestid_null")
SQL<-dbSendQuery(con, paste("select sender as sender , recipient ,count recipient from waves.type4_assestid_null where sender ='3P8wPvtfruNZjpqZACNjdqbtGRphwytdo6D' and recipient='3PAUszXBU952kUP7saJoJjYP3ujuUWQ8azY' "))
Transactions_outdegree_SQL <- dbFetch(SQL)
toc()
tic()
con <- dbConnect(drv = RMariaDB::MariaDB(), username = "root",password = "13021990Az&", host="104.155.13.142", port = 3306)
#query = "LOAD DATA LOCAL INFILE 'dataframecsv14.csv' INTO TABLE waves.type4_assestid_null
#                                           FIELDS TERMINATED by ','
#                                                     "
#dbGetQuery(con, query)
#dbGetQuery(con,"DROP TABLE waves.type4_assestid_null")
SQL<-dbSendQuery(con, paste("select sender as sender , recipient ,count (recipient) from waves.type4_assestid_null where sender ='3P8wPvtfruNZjpqZACNjdqbtGRphwytdo6D' and recipient='3PAUszXBU952kUP7saJoJjYP3ujuUWQ8azY' "))
Transactions_outdegree_SQL <- dbFetch(SQL)
toc()
tic()
con <- dbConnect(drv = RMariaDB::MariaDB(), username = "root",password = "13021990Az&", host="104.155.13.142", port = 3306)
#query = "LOAD DATA LOCAL INFILE 'dataframecsv14.csv' INTO TABLE waves.type4_assestid_null
#                                           FIELDS TERMINATED by ','
#                                                     "
#dbGetQuery(con, query)
#dbGetQuery(con,"DROP TABLE waves.type4_assestid_null")
SQL<-dbSendQuery(con, paste("select recipient, count(recipient) as sum ,  sender  from  waves.type4_assestid_null where sender in   (select sender from   (select count(amount) AS sumamount,sender  from  waves.type4_assestid_null GROUP BY  sender order by  sumamount desc limit 10) as v2 ) GROUP BY  recipient, sender order by  sum desc limit 10"))
Transactions_outdegree_SQL <- dbFetch(SQL)
toc()
View(Transactions_outdegree_SQL)
tic()
con <- dbConnect(drv = RMariaDB::MariaDB(), username = "root",password = "13021990Az&", host="104.155.13.142", port = 3306)
#query = "LOAD DATA LOCAL INFILE 'dataframecsv14.csv' INTO TABLE waves.type4_assestid_null
#                                           FIELDS TERMINATED by ','
#                                                     "
#dbGetQuery(con, query)
#dbGetQuery(con,"DROP TABLE waves.type4_assestid_null")
SQL<-dbSendQuery(con, paste("select recipient, count(recipient) as sum ,  sender  from  waves.type4_assestid_null where sender in   (select sender from   (select count(amount) AS sumamount,  sender from  waves.type4_assestid_null GROUP BY  sender order by  sumamount desc limit 10) as v2 ) GROUP BY  recipient, sender order by  sum desc limit 10"))
Transactions_outdegree_SQL <- dbFetch(SQL)
toc()
View(Transactions_outdegree_SQL)
View(Transactions_outdegree_SQL)
tic()
use_python("C:\Users\PC\AppData\Local\Programs\Python\Python37")
is_python_available <- py_available()
#paste("Is Python Available?", is_python_available)
uri = "bolt://localhost:7687"
neo4j <-import("neo4j", convert = FALSE)
token <- neo4j$basic_auth("neo4j","blockla5er")
driver <- neo4j$GraphDatabase$driver(uri, auth=token)
the_session <- driver$session()
tx <- the_session$begin_transaction()
record <- tx$run("MATCH (user:Sender )-[w:senden]->(recipient:Recipient) with count(w)as count, user as user   order by  count desc  limit 10  MATCH (user )-[w:senden]->(r:Recipient) with count(w)as count1, user as user , r as r   order by  count1 desc  limit 10 return user.name,r.name, count1")
record_data <- record$data()
toc()
dat<-py_to_r(record_data)
#convertir list to dataframe
ed <- data.frame(matrix(unlist(dat), ncol = max(lengths(dat)), byrow = TRUE))
tic()
use_python("C:\Users\PC\AppData\Local\Programs\Python\Python37")
is_python_available <- py_available()
#paste("Is Python Available?", is_python_available)
uri = "bolt://localhost:7687"
neo4j <-import("neo4j", convert = FALSE)
token <- neo4j$basic_auth("neo4j","blockla5er")
driver <- neo4j$GraphDatabase$driver(uri, auth=token)
the_session <- driver$session()
tx <- the_session$begin_transaction()
record <- tx$run("MATCH (user:Sender )-[w:senden]->(recipient:Recipient) with count(w)as count, user as user   order by  count desc  limit 10  MATCH (user )-[w:senden]->(r:Recipient) with count(w)as count1, user as user , r as r   order by  count1 desc  limit 10 return user.name,r.name, count1")
record_data <- record$data()
toc()
dat<-py_to_r(record_data)
#convertir list to dataframe
ed <- data.frame(matrix(unlist(dat), ncol = max(lengths(dat)), byrow = TRUE))
tic()
use_python("C:\Users\PC\AppData\Local\Programs\Python\Python37")
is_python_available <- py_available()
#paste("Is Python Available?", is_python_available)
uri = "bolt://localhost:7687"
neo4j <-import("neo4j", convert = FALSE)
token <- neo4j$basic_auth("neo4j","blockla5er")
driver <- neo4j$GraphDatabase$driver(uri, auth=token)
the_session <- driver$session()
tx <- the_session$begin_transaction()
record <- tx$run("MATCH (user:Sender )-[w:senden]->(recipient:Sender) with count(w)as count, user as user   order by  count desc  limit 10  MATCH (user )-[w:senden]->(r:Sender) with count(w)as count1, user as user , r as r   order by  count1 desc  limit 10 return user.name,r.name, count1")
record_data <- record$data()
toc()
dat<-py_to_r(record_data)
#convertir list to dataframe
ed <- data.frame(matrix(unlist(dat), ncol = max(lengths(dat)), byrow = TRUE))
tic()
con <- dbConnect(drv = RMariaDB::MariaDB(), username = "root",password = "13021990Az&", host="104.155.13.142", port = 3306)
#query = "LOAD DATA LOCAL INFILE 'dataframecsv14.csv' INTO TABLE waves.type4_assestid_null
#                                           FIELDS TERMINATED by ','
#                                                     "
#dbGetQuery(con, query)
#dbGetQuery(con,"DROP TABLE waves.type4_assestid_null")
SQL<-dbSendQuery(con, paste("select recipient, count(recipient) as sum ,  sender  from  waves.type4_assestid_null where sender in   (select sender from   (select count(amount) AS sumamount,  sender from  waves.type4_assestid_null GROUP BY  sender order by  sumamount desc limit 10) as v2 ) GROUP BY  recipient, sender order by  sum desc limit 10"))
Transactions_outdegree_SQL <- dbFetch(SQL)
toc()
tic()
con <- dbConnect(drv = RMariaDB::MariaDB(), username = "root",password = "13021990Az&", host="104.155.13.142", port = 3306)
#query = "LOAD DATA LOCAL INFILE 'dataframecsv14.csv' INTO TABLE waves.type4_assestid_null
#                                           FIELDS TERMINATED by ','
#                                                     "
#dbGetQuery(con, query)
#dbGetQuery(con,"DROP TABLE waves.type4_assestid_null")
SQL<-dbSendQuery(con, paste("select recipient , sum(amount) as sum  from  waves.type4_assestid_null GROUP BY  recipient  order by  sum desc limit 10"))
Transactions_outdegree_SQL <- dbFetch(SQL)
toc()
View(Transactions_outdegree_SQL)
tic()
use_python("C:\Users\PC\AppData\Local\Programs\Python\Python37")
is_python_available <- py_available()
#paste("Is Python Available?", is_python_available)
uri = "bolt://localhost:7687"
neo4j <-import("neo4j", convert = FALSE)
token <- neo4j$basic_auth("neo4j","blockla5er")
driver <- neo4j$GraphDatabase$driver(uri, auth=token)
the_session <- driver$session()
tx <- the_session$begin_transaction()
record <- tx$run("MATCH (p1:Sender)-[w:senden]->(r:Sender) with  p1 as p,SUM(toInteger(w.amount)) as sum   ORDER BY sum DESC limit 10 return p.name ,sum")
record_data <- record$data()
toc()
dat<-py_to_r(record_data)
tic()
con <- dbConnect(drv = RMariaDB::MariaDB(), username = "root",password = "13021990Az&", host="104.155.13.142", port = 3306)
#query = "LOAD DATA LOCAL INFILE 'dataframecsv14.csv' INTO TABLE waves.type4_assestid_null
#                                           FIELDS TERMINATED by ','
#                                                     "
#dbGetQuery(con, query)
#dbGetQuery(con,"DROP TABLE waves.type4_assestid_null")
SQL<-dbSendQuery(con, paste("select sender , sum(amount) as sum  from  waves.type4_assestid_null GROUP BY  sender  order by  sum desc limit 10"))
Transactions_outdegree_SQL <- dbFetch(SQL)
toc()
tic()
con <- dbConnect(drv = RMariaDB::MariaDB(), username = "root",password = "13021990Az&", host="104.155.13.142", port = 3306)
SQL<-dbSendQuery(con, paste("select recipient , sum(amount) as sum  from  waves.type4_assestid_null GROUP BY  recipient  order by  sum desc limit 10"))
Transactions_outdegree_SQL <- dbFetch(SQL)
toc()
tic()
use_python("C:\Users\PC\AppData\Local\Programs\Python\Python37")
is_python_available <- py_available()
#paste("Is Python Available?", is_python_available)
uri = "bolt://localhost:7687"
neo4j <-import("neo4j", convert = FALSE)
token <- neo4j$basic_auth("neo4j","blockla5er")
driver <- neo4j$GraphDatabase$driver(uri, auth=token)
the_session <- driver$session()
tx <- the_session$begin_transaction()
record <- tx$run("MATCH (p1:Sender)-[w:senden]->(r:Sender) with  p1 as p,SUM(toInteger(w.amount)) as sum   ORDER BY sum DESC limit 10 return p.name ,sum")
record_data <- record$data()
toc()
dat<-py_to_r(record_data)
#convertir list to dataframe
ed <- data.frame(matrix(unlist(dat), ncol = max(lengths(dat)), byrow = TRUE))
View(Transactions_outdegree_SQL)
View(ed)
tic()
con <- dbConnect(drv = RMariaDB::MariaDB(), username = "root",password = "13021990Az&", host="104.155.13.142", port = 3306)
#query = "LOAD DATA LOCAL INFILE 'dataframecsv14.csv' INTO TABLE waves.type4_assestid_null
#                                           FIELDS TERMINATED by ','
#                                                     "
#dbGetQuery(con, query)
#dbGetQuery(con,"DROP TABLE waves.type4_assestid_null")
SQL<-dbSendQuery(con, paste("select sender , sum(amount) as sum  from  waves.type4_assestid_null GROUP BY  sender  order by  sum desc limit 10"))
Transactions_outdegree_SQL <- dbFetch(SQL)
toc()
View(Transactions_outdegree_SQL)
tic()
use_python("C:\Users\PC\AppData\Local\Programs\Python\Python37")
is_python_available <- py_available()
#paste("Is Python Available?", is_python_available)
uri = "bolt://localhost:7687"
neo4j <-import("neo4j", convert = FALSE)
token <- neo4j$basic_auth("neo4j","blockchain")
driver <- neo4j$GraphDatabase$driver(uri, auth=token)
the_session <- driver$session()
tx <- the_session$begin_transaction()
record <- tx$run("MATCH (p1:Sender)-[w:senden]->(r:Sender) with  r as p,SUM(toInteger(w.amount)) as sum   ORDER BY sum DESC limit 10 return r.name ,sum")
record_data <- record$data()
toc()
dat<-py_to_r(record_data)
tic()
use_python("C:\Users\PC\AppData\Local\Programs\Python\Python37")
is_python_available <- py_available()
#paste("Is Python Available?", is_python_available)
uri = "bolt://localhost:7687"
neo4j <-import("neo4j", convert = FALSE)
token <- neo4j$basic_auth("neo4j","blockchain")
driver <- neo4j$GraphDatabase$driver(uri, auth=token)
the_session <- driver$session()
tx <- the_session$begin_transaction()
record <- tx$run("MATCH (p1:Sender)-[w:senden]->(r:Recipient) with  r as p,SUM(toInteger(w.amount)) as sum   ORDER BY sum DESC limit 10 return r.name ,sum")
record_data <- record$data()
toc()
dat<-py_to_r(record_data)
tic()
use_python("C:\Users\PC\AppData\Local\Programs\Python\Python37")
is_python_available <- py_available()
#paste("Is Python Available?", is_python_available)
uri = "bolt://localhost:7687"
neo4j <-import("neo4j", convert = FALSE)
token <- neo4j$basic_auth("neo4j","blockchain")
driver <- neo4j$GraphDatabase$driver(uri, auth=token)
the_session <- driver$session()
tx <- the_session$begin_transaction()
record <- tx$run("MATCH (p1:Sender)-[w:senden]->(r:Recipient) with  r as p,SUM(toInteger(w.amount)) as sum   ORDER BY sum DESC limit 10 return r.name ,sum")
record_data <- record$data()
toc()
dat<-py_to_r(record_data)
#convertir list to dataframe
ed <- data.frame(matrix(unlist(dat), ncol = max(lengths(dat)), byrow = TRUE))
tic()
use_python("C:\Users\PC\AppData\Local\Programs\Python\Python37")
is_python_available <- py_available()
#paste("Is Python Available?", is_python_available)
uri = "bolt://localhost:7687"
neo4j <-import("neo4j", convert = FALSE)
token <- neo4j$basic_auth("neo4j","blockchain")
driver <- neo4j$GraphDatabase$driver(uri, auth=token)
the_session <- driver$session()
tx <- the_session$begin_transaction()
record <- tx$run("MATCH (p1:Sender)-[w:senden]->(r:Recipient) with  r as p,SUM(toInteger(w.amount)) as sum   ORDER BY sum DESC limit 10 return p.name ,sum")
record_data <- record$data()
toc()
dat<-py_to_r(record_data)
#convertir list to dataframe
ed <- data.frame(matrix(unlist(dat), ncol = max(lengths(dat)), byrow = TRUE))
tic()
use_python("C:\Users\PC\AppData\Local\Programs\Python\Python37")
is_python_available <- py_available()
#paste("Is Python Available?", is_python_available)
uri = "bolt://localhost:7687"
neo4j <-import("neo4j", convert = FALSE)
token <- neo4j$basic_auth("neo4j","blockchain")
driver <- neo4j$GraphDatabase$driver(uri, auth=token)
the_session <- driver$session()
tx <- the_session$begin_transaction()
record <- tx$run("MATCH (p1:Sender)-[w:senden]->(r:Recipient) with  r as p,SUM(toInteger(w.weigth)) as sum   ORDER BY sum DESC limit 10 return p.num ,sum")
record_data <- record$data()
toc()
dat<-py_to_r(record_data)
#convertir list to dataframe
ed <- data.frame(matrix(unlist(dat), ncol = max(lengths(dat)), byrow = TRUE))
View(ed)
tic()
use_python("C:\Users\PC\AppData\Local\Programs\Python\Python37")
is_python_available <- py_available()
#paste("Is Python Available?", is_python_available)
uri = "bolt://localhost:7687"
neo4j <-import("neo4j", convert = FALSE)
token <- neo4j$basic_auth("neo4j","blockchain")
driver <- neo4j$GraphDatabase$driver(uri, auth=token)
the_session <- driver$session()
tx <- the_session$begin_transaction()
record <- tx$run("MATCH (p1:Sender)-[w:senden]->(r:Recipient) with  r as p , SUM(toInteger(w.weight)) as sum   ORDER BY sum DESC limit 10 return p.num,sum")
record_data <- record$data()
toc()
dat<-py_to_r(record_data)
#convertir list to dataframe
ed <- data.frame(matrix(unlist(dat), ncol = max(lengths(dat)), byrow = TRUE))
View(ed)
tic()
con <- dbConnect(drv = RMariaDB::MariaDB(), username = "root",password = "13021990Az&", host="104.155.13.142", port = 3306)
SQL<-dbSendQuery(con, paste("select recipient , sum(amount) as sum  from  waves.type4_assestid_null GROUP BY  recipient  order by  sum desc limit 10"))
Transactions_outdegree_SQL <- dbFetch(SQL)
toc()
View(Transactions_outdegree_SQL)
tic()
con <- dbConnect(drv = RMariaDB::MariaDB(), username = "root",password = "13021990Az&", host="104.155.13.142", port = 3306)
SQL<-dbSendQuery(con, paste("select recipient, count(recipient) as sum ,  sender  from  waves.type4_assestid_null where sender in   (select sender from   (select count(amount) AS sumamount,  sender from  waves.type4_assestid_null GROUP BY  sender order by  sumamount desc limit 10) as v2 ) GROUP BY  recipient, sender order by  sum desc limit 10"))
Transactions_outdegree_SQL <- dbFetch(SQL)
toc()
tic()
con <- dbConnect(drv = RMariaDB::MariaDB(), username = "root",password = "13021990Az&", host="104.155.13.142", port = 3306)
SQL<-dbSendQuery(con, paste("select recipient, count(recipient) as sum ,  sender  from  waves.type4_assestid_null where sender in   (select sender from   (select count(amount) AS sumamount,  sender from  waves.type4_assestid_null GROUP BY  sender order by  sumamount desc limit 10) as v2 ) GROUP BY  recipient, sender order by  sum desc limit 10"))
Transactions_outdegree_SQL <- dbFetch(SQL)
toc()
waves<-read.csv("wavs.csv")
wav1<-read.csv("1.csv")
wav2<-read.csv("2.csv")
wav3<-read.csv("3.csv")
wav4<-read.csv("1.csv")
wav5<-read.csv("2.csv")
wav6<-read.csv("3.csv")
wav7<-read.csv("1.csv")
wav8<-read.csv("2.csv")
wav9<-read.csv("3.csv")
wav1<-read.csv("1.csv")
wav2<-read.csv("2.csv")
wav3<-read.csv("3.csv")
wav4<-read.csv("4.csv")
wav5<-read.csv("5.csv")
wav6<-read.csv("6.csv")
wav7<-read.csv("7.csv")
wav8<-read.csv("8.csv")
wav9<-read.csv("9.csv")
View(wav3)
View(wav4)
wav<-do.call("rbind", list(wav1,wav2,wav3,wav4,wav5,wav6,wav7,wav8,wav9))
wav<-do.call("rbind", list(wav2,wav3,wav4,wav5,wav6,wav7,wav8,wav9))
View(wav)
View(waves)
nc33<-read.csv("nc2.csv")
nc16<-read.csv("nc3.csv")
nc27<-read.csv("nc4.csv")
nc19<-read.csv("nc5.csv")
x.sub5 <-waves[waves$sender  %in% nc16, ]
x.sub5 <-waves[waves$sender  %in% nc16, ]
x.sub5 <-waves[waves$sender  %in% nc16$name, ]
View(x.sub5)
x.sub5 <-waves[(waves$sender  %in% nc16$name)  &(waves$sender  %in% nc16$name), ]
x.sub5 <-waves[(waves$sender  %in% nc16$name)  &(waves$recipient  %in% nc16$name), ]
View(x.sub5)
clus16 <-waves[(waves$sender  %in% nc16$name)  &(waves$recipient  %in% nc16$name), ]
sum16<-sum(clus16$amount)
clus16 <-waves[(waves$sender  %in% nc19$name)  &(waves$recipient  %in% nc19$name), ]
sum16<-sum(clus19$amount)
clus19 <-waves[(waves$sender  %in% nc19$name)  &(waves$recipient  %in% nc19$name), ]
sum16<-sum(clus19$amount)
clus33 <-waves[(waves$sender  %in% nc33$name)  &(waves$recipient  %in% nc33$name), ]
sum16<-sum(clus33$amount)
clus33 <-waves[(waves$sender  %in% nc33$name)  &(waves$recipient  %in% nc33$name), ]
sum16<-sum(clus33$amount)
View(nc33)
clus33 <-waves[(waves$sender  %in% nc33$Name)  &(waves$recipient  %in% nc33$Name), ]
sum16<-sum(clus33$amount)
View(nc27)
clus27 <-waves[(waves$sender  %in% nc27$name)  &(waves$recipient  %in% nc27$name), ]
sum16<-sum(clus27$amount)
clus27 <-wav[(wav$sender  %in% nc27$name)  &(wav$recipient  %in% nc27$name), ]
clus27 <-wav[(wav$sender  %in% nc27$name)  &(wav$recipient  %in% nc27$name), ]
sum16<-sum(clus27$price)
clus19 <-wav[(wav$sender  %in% nc19$name)  &(wav$recipient  %in% nc19$name), ]
sum16<-sum(clus19$price)
clus33 <-wav[(wav$sender  %in% nc33$name)  &(wav$recipient  %in% nc33$name), ]
sum16<-sum(clus33$price)
clus33 <-wav[(wav$sender  %in% nc33$Name)  &(wav$recipient  %in% nc33$Name), ]
sum16<-sum(clus33$price)
clus16 <-wav[(wav$sender  %in% nc16$name)  &(wav$recipient  %in% nc16$name), ]
sum16<-sum(clus16$price)
wavwithou <-wav[((!(wav$sender  %in% nc16$name))&(!(wav$sender  %in% nc19$name)) &(!(wav$sender  %in% nc33$Name))&(!(wav$sender  %in% nc27$name))) &((!(wav$recipient  %in% nc16$name))&(!(wav$recipient  %in% nc19$name)) &(!(wav$recipient  %in% nc33$Name))&(!(wav$recipient  %in% nc27$name))), ]
View(nc16)
wavwithou <-wav[((!(wav$sender  %in% nc16$name))&(!(wav$sender  %in% nc19$name)) &(!(wav$sender  %in% nc33$Name))&(!(wav$sender  %in% nc27$name))) &((!(wav$recipient  %in% nc16$name))&(!(wav$recipient  %in% nc19$name)) &(!(wav$recipient  %in% nc33$Name))&(!(wav$recipient  %in% nc27$name))), ]
sum16<-sum(wavwithou$price)
wavwithou <-wav[((!(wav$sender  %in% nc16$name))&(!(wav$sender  %in% nc19$name)) &(!(wav$sender  %in% nc33$Name))&(!(wav$sender  %in% nc27$name))) &((!(wav$recipient  %in% nc16$name))&(!(wav$recipient  %in% nc19$name)) &(!(wav$recipient  %in% nc33$Name))&(!(wav$recipient  %in% nc27$name))), ]
sum16<-sum(wavwithou$price)
waveswithou <-waves[((!(waves$sender  %in% nc16$name))&(!(wav$sender  %in% nc19$name)) &(!(wav$sender  %in% nc33$Name))&(!(wav$sender  %in% nc27$name))) &((!(wav$recipient  %in% nc16$name))&(!(wav$recipient  %in% nc19$name)) &(!(wav$recipient  %in% nc33$Name))&(!(wav$recipient  %in% nc27$name))), ]
sum16<-sum(wavwithou$price)
waveswithou <-waves[((!(waves$sender  %in% nc16$name))&(!(waves$sender  %in% nc19$name)) &(!(waves$sender  %in% nc33$Name))&(!(waves$sender  %in% nc27$name))) &((!(waves$recipient  %in% nc16$name))&(!(waves$recipient  %in% nc19$name)) &(!(waves$recipient  %in% nc33$Name))&(!(waves$recipient  %in% nc27$name))), ]
sum16<-sum(waveswithou $price)
sum16<-sum(waveswithou$price)
waveswithou <-waves[((!(waves$sender  %in% nc16$name))&(!(waves$sender  %in% nc19$name)) &(!(waves$sender  %in% nc33$Name))&(!(waves$sender  %in% nc27$name))) &((!(waves$recipient  %in% nc16$name))&(!(waves$recipient  %in% nc19$name)) &(!(waves$recipient  %in% nc33$Name))&(!(waves$recipient  %in% nc27$name))), ]
View(wavwithou)
View(waveswithou)
View(wavwithou)
View(waveswithou)
View(wavwithou)
waveswithou <-waves[((!(waves$sender  %in% nc16$name))&(!(waves$sender  %in% nc19$name)) &(!(waves$sender  %in% nc33$Name))&(!(waves$sender  %in% nc27$name))) &((!(waves$recipient  %in% nc16$name))&(!(waves$recipient  %in% nc19$name)) &(!(waves$recipient  %in% nc33$Name))&(!(waves$recipient  %in% nc27$name))), ]
sum16<-sum(waveswithou$amount)
sum16<
